https://stackoverflow.com/questions/56729457/in-python-how-to-writing-to-cosmosdb-from-azure-serverless-function-using-info

I found the answer. In my azure function's definition, this is my function.json

{
  "scriptFile": "__init__.py",
  "bindings": [
    {
      "authLevel": "anonymous",
      "type": "httpTrigger",
      "direction": "in",
      "name": "req",
      "methods": [
        "get",
        "post"
      ]
    },
    {
      "name": "cosmos",
      "type": "cosmosDB",
      "direction": "out",
      "ConnectionStringSetting": "CosmosDBConnection",
      "databaseName": "messages",
      "collectionName": "messages_1",
      "createIfNotExists": true
    },
    {
      "type": "http",
      "direction": "out",
      "name": "$return",
      "dataType": "string" 
    }
  ]
}
It describes three bindings,

The first is the input http trigger
My connection to the cosmos db, where

cosmos is the name.
the direction is out
the ConnectionStringSettings points to the CosmosDBConnection, which is defined as a function's Connection->Application settings. The Application setting contains the CosmosDB Primary Connection String AccountEndpoint=https://....
database is the database it will write into
collectionName is the name of the collection, in the database
An http output connector used to return http responses.

In my python code, I use the out as a parameter passed in and write to it.

import azure.functions as func
from  azure.cosmos import cosmos_client


def main(req: func.HttpRequest, cosmos: func.Out[func.Document]) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')

    # your magic

    # create a dictionary, foo_bar in this case
    # On the parameter passed in, named cosmos, use the set() operator
    # in insert a Document, built from the dictionary

    cosmos.set(func.Document.from_dict(foo_bar))
No other setup of the database is needed. It is handled by azure, processing the function.json file. Just make sure your function.json's ConnectionStringSetting points to an attribute holding your connection string.

A few more tidbits

watch your virtual network settings, so function and create the db.
use the Microsoft 'func' package for local testing.
Postman is a great tool for local testing.